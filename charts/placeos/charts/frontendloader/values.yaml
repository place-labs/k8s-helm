# Default values for frontend-loader.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- httpSidecar if true include http server side car container to frontend pod to serve static UI resources.
httpSidecar: false

# httpDeployment if httpSidecar=false use a seperate Deployment to serve static html using the variables in httpDeployment. Also see persistentVolume.accessModes
httpDeployment:
  # -- number of replicas to deploy
  replicaCount: 1
  # -- pod priority class must exist already Generated by the init job chart
  podPriorityClassName: high
  image:
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
    # -- tag Overrides the image tag whose default is the chart appVersion.
    tag: alpine
    pullPolicy: IfNotPresent

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations: {}

  # -- podSecurityContext for the pod
  podSecurityContext:
    # -- fsGroup is defined at container build time and in most circumstances should not be changed
    fsGroup: 10001

  securityContext:
    allowPrivilegeEscalation: false
    # -- Linux Capabilities for the container
    capabilities:
      add:
      - NET_BIND_SERVICE
      drop:
      - ALL
    readOnlyRootFilesystem: true
    # -- runAsUser is defined at container build time and in most circumstances should not be changed
    runAsUser: 10001
    runAsNonRoot: true
  # -- Pod resources request and limits
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity:
    # -- anti-affinitiy to ensure multiple pods to not converge to a single node
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - frontendloader
          topologyKey: kubernetes.io/hostname

# autoscaling configuration for pod
autoscaling:
  # -- enable horizontal pod autoscaling
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# deployment configuration for the frontend container
deployment:
  # -- number of replicas to deploy
  replicaCount: 1
  # -- pod priority class must exist already Generated by the init job chart
  podPriorityClassName: medium
  image:
    registry: docker.io
    repository: placeos/frontend-loader
    pullPolicy: IfNotPresent
    # -- tag Overrides the image tag whose default is the chart appVersion.
    #tag: placeos-2.2504.2

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations: {}

  podSecurityContext:
    # -- fsGroup is defined at container build time and in most circumstances should not be changed
    fsGroup: 10001

  securityContext:
    # -- Linux Capabilities for the container
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    # -- runAsUser is defined at container build time and in most circumstances should not be changed
    runAsUser: 10001
  # -- Pod resources request and limits
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  autoscaling:
    # -- enable horizontal pod autoscaling
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - frontendloader
          topologyKey: kubernetes.io/hostname

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- service exposed by frontend deployment
service:
  type: ClusterIP
  port: 3000

# -- persistentVolume configuration for the volume that conatains the static resources to serve backend
# persistentVolume.accssMode ReadWriteMany is required for distributed http serving which is set when httpSidecar: true
# see https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
persistentVolumeClaim:
  name: www
  accessModes:
    - ReadWriteOnce
  storage: 1G

ingress:
  # -- ingress to expose the http server pod services
  enabled: true
  annotations: {
    nginx.ingress.kubernetes.io/configuration-snippet: 'add_header X-Frame-Options SAMEORIGIN;'
  }
  hosts:
     - host: "_"
       paths:
       - /
  tls:
    - hosts:
        - "_"
# -- service exposed by http server
httpservice:
  type: ClusterIP
  port: 8080

# configmap for the deployment exposed as environment variables to the pod
configmap:
  # -- values exposed as environment variable to the pod
  ENV: null
  PLACE_LOADER_WWW: www
  SG_ENV: null
  TZ: Australia/Sydney
  PG_DB: null
  PG_HOST: null
  PG_PORT: null
  PG_USER: null

# secrets for the deployment exposed as environment variables to the pod
secrets:
  # -- value exposed as environment variable to the pod
  PG_PASSWORD: null

global:
  gcpbackendConfig:
    enabled: false
